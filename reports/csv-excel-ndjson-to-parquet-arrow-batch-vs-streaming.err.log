Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Create data directory
Path('data').mkdir(exist_ok=True)

# Save as CSV
df_medical.to_csv('data/medical_data.csv', index=False)
print(f"CSV file size: {os.path.getsize('data/medical_data.csv') / 1024 / 1024:.2f} MB")

# Save as Excel
df_medical.to_excel('data/medical_data.xlsx', index=False)
print(f"Excel file size: {os.path.getsize('data/medical_data.xlsx') / 1024 / 1024:.2f} MB")
------------------

----- stdout -----
CSV file size: 0.52 MB
------------------

[31m---------------------------------------------------------------------------[39m
[31mModuleNotFoundError[39m                       Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[3][39m[32m, line 9[39m
[32m      6[39m [38;5;28mprint[39m([33mf[39m[33m"[39m[33mCSV file size: [39m[38;5;132;01m{[39;00mos.path.getsize([33m'[39m[33mdata/medical_data.csv[39m[33m'[39m)[38;5;250m [39m/[38;5;250m [39m[32m1024[39m[38;5;250m [39m/[38;5;250m [39m[32m1024[39m[38;5;132;01m:[39;00m[33m.2f[39m[38;5;132;01m}[39;00m[33m MB[39m[33m"[39m)
[32m      8[39m [38;5;66;03m# Save as Excel[39;00m
[32m----> [39m[32m9[39m [43mdf_medical[49m[43m.[49m[43mto_excel[49m[43m([49m[33;43m'[39;49m[33;43mdata/medical_data.xlsx[39;49m[33;43m'[39;49m[43m,[49m[43m [49m[43mindex[49m[43m=[49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m
[32m     10[39m [38;5;28mprint[39m([33mf[39m[33m"[39m[33mExcel file size: [39m[38;5;132;01m{[39;00mos.path.getsize([33m'[39m[33mdata/medical_data.xlsx[39m[33m'[39m)[38;5;250m [39m/[38;5;250m [39m[32m1024[39m[38;5;250m [39m/[38;5;250m [39m[32m1024[39m[38;5;132;01m:[39;00m[33m.2f[39m[38;5;132;01m}[39;00m[33m MB[39m[33m"[39m)

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pandas/util/_decorators.py:333[39m, in [36mdeprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper[39m[34m(*args, **kwargs)[39m
[32m    327[39m [38;5;28;01mif[39;00m [38;5;28mlen[39m(args) > num_allow_args:
[32m    328[39m     warnings.warn(
[32m    329[39m         msg.format(arguments=_format_argument_list(allow_args)),
[32m    330[39m         [38;5;167;01mFutureWarning[39;00m,
[32m    331[39m         stacklevel=find_stack_level(),
[32m    332[39m     )
[32m--> [39m[32m333[39m [38;5;28;01mreturn[39;00m [43mfunc[49m[43m([49m[43m*[49m[43margs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pandas/core/generic.py:2436[39m, in [36mNDFrame.to_excel[39m[34m(self, excel_writer, sheet_name, na_rep, float_format, columns, header, index, index_label, startrow, startcol, engine, merge_cells, inf_rep, freeze_panes, storage_options, engine_kwargs)[39m
[32m   2423[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mpandas[39;00m[34;01m.[39;00m[34;01mio[39;00m[34;01m.[39;00m[34;01mformats[39;00m[34;01m.[39;00m[34;01mexcel[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m ExcelFormatter
[32m   2425[39m formatter = ExcelFormatter(
[32m   2426[39m     df,
[32m   2427[39m     na_rep=na_rep,
[32m   (...)[39m[32m   2434[39m     inf_rep=inf_rep,
[32m   2435[39m )
[32m-> [39m[32m2436[39m [43mformatter[49m[43m.[49m[43mwrite[49m[43m([49m
[32m   2437[39m [43m    [49m[43mexcel_writer[49m[43m,[49m
[32m   2438[39m [43m    [49m[43msheet_name[49m[43m=[49m[43msheet_name[49m[43m,[49m
[32m   2439[39m [43m    [49m[43mstartrow[49m[43m=[49m[43mstartrow[49m[43m,[49m
[32m   2440[39m [43m    [49m[43mstartcol[49m[43m=[49m[43mstartcol[49m[43m,[49m
[32m   2441[39m [43m    [49m[43mfreeze_panes[49m[43m=[49m[43mfreeze_panes[49m[43m,[49m
[32m   2442[39m [43m    [49m[43mengine[49m[43m=[49m[43mengine[49m[43m,[49m
[32m   2443[39m [43m    [49m[43mstorage_options[49m[43m=[49m[43mstorage_options[49m[43m,[49m
[32m   2444[39m [43m    [49m[43mengine_kwargs[49m[43m=[49m[43mengine_kwargs[49m[43m,[49m
[32m   2445[39m [43m[49m[43m)[49m

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pandas/io/formats/excel.py:943[39m, in [36mExcelFormatter.write[39m[34m(self, writer, sheet_name, startrow, startcol, freeze_panes, engine, storage_options, engine_kwargs)[39m
[32m    941[39m     need_save = [38;5;28;01mFalse[39;00m
[32m    942[39m [38;5;28;01melse[39;00m:
[32m--> [39m[32m943[39m     writer = [43mExcelWriter[49m[43m([49m
[32m    944[39m [43m        [49m[43mwriter[49m[43m,[49m
[32m    945[39m [43m        [49m[43mengine[49m[43m=[49m[43mengine[49m[43m,[49m
[32m    946[39m [43m        [49m[43mstorage_options[49m[43m=[49m[43mstorage_options[49m[43m,[49m
[32m    947[39m [43m        [49m[43mengine_kwargs[49m[43m=[49m[43mengine_kwargs[49m[43m,[49m
[32m    948[39m [43m    [49m[43m)[49m
[32m    949[39m     need_save = [38;5;28;01mTrue[39;00m
[32m    951[39m [38;5;28;01mtry[39;00m:

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pandas/io/excel/_openpyxl.py:57[39m, in [36mOpenpyxlWriter.__init__[39m[34m(self, path, engine, date_format, datetime_format, mode, storage_options, if_sheet_exists, engine_kwargs, **kwargs)[39m
[32m     44[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34m__init__[39m(
[32m     45[39m     [38;5;28mself[39m,
[32m     46[39m     path: FilePath | WriteExcelBuffer | ExcelWriter,
[32m   (...)[39m[32m     55[39m ) -> [38;5;28;01mNone[39;00m:
[32m     56[39m     [38;5;66;03m# Use the openpyxl module as the Excel writer.[39;00m
[32m---> [39m[32m57[39m     [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mopenpyxl[39;00m[34;01m.[39;00m[34;01mworkbook[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m Workbook
[32m     59[39m     engine_kwargs = combine_kwargs(engine_kwargs, kwargs)
[32m     61[39m     [38;5;28msuper[39m().[34m__init__[39m(
[32m     62[39m         path,
[32m     63[39m         mode=mode,
[32m   (...)[39m[32m     66[39m         engine_kwargs=engine_kwargs,
[32m     67[39m     )

[31mModuleNotFoundError[39m: No module named 'openpyxl'

